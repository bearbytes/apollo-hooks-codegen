/*
 * This file was generated by graphql-code-generator with the apollo-hooks-codegen plugin.
 * Any changes made to the file will be overwritten.
 */

import ApolloClient, {
  MutationOptions,
  ObservableQuery,
  WatchQueryOptions,
} from 'apollo-client'
import { createContext, useEffect, useState, useContext } from 'react'
import { DocumentNode } from 'graphql'
import gql from 'graphql-tag'

/*
 * Operations from ./tests/queries.graphql
 */

export const FetchVersion = queryFactory<
  {
    /* variables */
  },
  {
    /* data */
    myRequiredString: string
    myOptionalInt?: number
  }
>(gql`
  query FetchVersion {
    myRequiredString
    myOptionalInt
  }
`)

/*
 * Boilerplate
 */

type Omit<T, K> = Pick<T, Exclude<keyof T, K>>

const apolloContext = createContext<{ apolloClient?: ApolloClient<any> }>({})

export function useApolloWatchQuery<Data, Variables>(
  queryFactory: (
    apolloClient: ApolloClient<any>
  ) => ObservableQuery<Data, Variables>
): Data | undefined {
  const { apolloClient } = useContext(apolloContext)
  const [state, setState] = useState<Data | undefined>(undefined)
  useEffect(() => {
    const watchQuery = queryFactory(apolloClient)
    const subscription = watchQuery.subscribe(result => setState(result.data))
    return () => subscription.unsubscribe()
  }, [])
  return state
}

// export function useApolloMutation<Data, Variables>(
//   mutationFactory: (
//     apolloClient: ApolloClient<any>
//     ) => ObservableQuery<Data, Variables>
// )

function queryFactory<Variables, Data>(doc: DocumentNode) {
  return function(options: Omit<WatchQueryOptions<Variables>, 'query'> = {}) {
    return function(apolloClient: ApolloClient<any>) {
      return apolloClient.watchQuery<Data>({ query: doc, ...options })
    }
  }
}

// function mutationFactory<Variables, Data>(mutation: DocumentNode) {
//   return function(
//     options: Omit<MutationOptions<Data, Variables>, 'mutation'> = {}
//   ) {
//     return async function(apolloClient: ApolloClient<any>) {
//       const result = await apolloClient.mutate<Data>({ mutation, ...options })
//       return result.data as Data
//     }
//   }
// }
