type Query {
  myRequiredString: String!
  myOptionalInt: Int

  myType: MyType
  myIntList: [Int]

  multiply(a: Int!, b: Float!, printResult: Boolean): Float
  accumulate(list: [Int]): ID!
}

type Mutation {
  doSomething(input: MyInputType): MyType
}

type MyType {
  foo: String
  nested: MyNestedType!
}

type MyNestedType {
  bar: Float
}

input MyInputType {
  anIntMaybe: Int
  aString: String!
  aNestedObjectMaybe: MyNestedInputType
  aNestedObject: MyNestedInputType!
}

input MyNestedInputType {
  itsRecursive: MyNestedInputType
}
