/*
 * This file was generated by graphql-code-generator with the apollo-hooks-codegen plugin.
 * Any changes made to the file will be overwritten.
 */

import * as React from 'react'
import { createContext, useEffect, useState, useContext, useRef } from 'react'
import ApolloClient, {
  MutationOptions,
  ObservableQuery,
  WatchQueryOptions,
  SubscriptionOptions,
  ApolloQueryResult,
} from 'apollo-client'
import { FetchResult, Observable } from 'apollo-link'
import { DocumentNode } from 'graphql'
import gql from 'graphql-tag'

/*
 * GraphQL Input Types
 */

export type TodoItemInput = {
  title: TodoItemInput_title
  description?: Nullable<TodoItemInput_description>
  dueDate?: Nullable<TodoItemInput_dueDate>
}
export type TodoItemInput_title = string
export type TodoItemInput_description = string
export type TodoItemInput_dueDate = any

/*
 * Operations from src/queries/demo.graphql
 */

export type TodoParts = {
  id: id
  title: title
  isDone: isDone
}
export type id = string
export type title = string
export type isDone = boolean
export const getAllTodos = query<getAllTodos_variables, getAllTodos_data>(gql`
  query getAllTodos {
    todoItems {
      ...TodoParts
    }
  }
`)
export type getAllTodos_variables = {}
export type getAllTodos_data = {
  todoItems: ReadonlyArray<getAllTodos_data_todoItems>
}
export type getAllTodos_data_todoItems = {}

export const subscribeTodos = subscription<
  subscribeTodos_variables,
  subscribeTodos_data
>(gql`
  subscription subscribeTodos {
    subscribeTodoItems {
      ...TodoParts
    }
  }
`)
export type subscribeTodos_variables = {}
export type subscribeTodos_data = {
  subscribeTodoItems: subscribeTodos_data_subscribeTodoItems
}
export type subscribeTodos_data_subscribeTodoItems = {}

export const createTodo = mutation<createTodo_variables, createTodo_data>(gql`
  mutation createTodo($todoItem: TodoItemInput!) {
    createTodoItem(todoItem: $todoItem) {
      id
    }
  }
`)
export type createTodo_variables = {
  todoItem: createTodo_variables_todoItem
}
export type createTodo_variables_todoItem = TodoItemInput
export type createTodo_data = {
  createTodoItem: createTodo_data_createTodoItem
}
export type createTodo_data_createTodoItem = {
  id: createTodo_data_createTodoItem_id
}
export type createTodo_data_createTodoItem_id = string

/*
 * Boilerplate
 */

type Nullable<T> = T | null
type Omit<T, K> = Pick<T, Exclude<keyof T, K>>
type QueryOpts<V> = Omit<WatchQueryOptions<V>, 'query'>
type MutateOpts<D, V> = Omit<MutationOptions<D, V>, 'mutation'>
type SubscriptionOpts<V> = Omit<SubscriptionOptions<V>, 'query'>

// We grab the ApolloClient from this context within our hooks
type ContextType = { apolloClient?: ApolloClient<any> }
const apolloContext = createContext<ContextType>({})

// Must be inserted at the root of all components that want to use the hook
// functions supplied by this file.
export function ApolloHooksProvider({
  children,
  apolloClient,
}: {
  children?: React.ReactNode
  apolloClient: ApolloClient<any> | undefined
}) {
  const elementType = apolloContext.Provider
  const elementProps: React.ProviderProps<ContextType> = {
    value: { apolloClient },
  }
  return React.createElement(elementType, elementProps, children)
}

// Executes a query that has been created by calling the exported function with
// the same name as the query operation.
// The React Hooks rules apply - this function must be called unconditionally
// within a functional React Component and will rerender the component whenever
// the query result changes.
export function useApolloQuery<D, V>(
  configuredQuery: (client: ApolloClient<any>) => ObservableQuery<D, V>,
  queryCallback?: (query: ObservableQuery<D, V>) => void
): Nullable<ApolloQueryResult<D>> {
  const { apolloClient } = useContext(apolloContext)
  if (!apolloClient) throw 'No ApolloClient provided'

  const query = useRef(configuredQuery(apolloClient))

  const [result, setResult] = useState<Nullable<ApolloQueryResult<D>>>(null)
  useEffect(() => {
    if (queryCallback) {
      queryCallback(query.current)
    }

    const subscription = query.current.subscribe(setResult)
    return () => subscription.unsubscribe()
  }, [])

  return result
}

// Prepares a mutate function when supplied with the exported function with
// the same name as the mutation operation.
// The React Hooks rules apply - this function must be called unconditionally
// within a functional React Component.
export function useApolloMutation<D, V>(
  configuredMutation: (
    client: ApolloClient<any>
  ) => (opts?: MutateOpts<D, V>) => Promise<FetchResult<D>>
) {
  const { apolloClient } = useContext(apolloContext)
  if (!apolloClient) throw 'No ApolloClient provided'
  const mutate = configuredMutation(apolloClient)
  return mutate
}

export function useApolloSubscription<D>(
  configuredSubscription: (client: ApolloClient<any>) => Observable<D>
): Nullable<D> {
  const { apolloClient } = useContext(apolloContext)
  if (!apolloClient) throw 'No ApolloClient provided'

  const observable = useRef(configuredSubscription(apolloClient))

  const [result, setResult] = useState<Nullable<D>>(null)
  useEffect(() => {
    const subscription = observable.current.subscribe(setResult)
    return () => subscription.unsubscribe()
  })

  return result
}

// Converts a gql-snippet into a user-callable function that takes options,
// which can then be passed to useApolloMutation to provide the mutate function.
function mutation<V, D>(mutation: DocumentNode) {
  return function configureMutation(opts: MutateOpts<D, V> = {}) {
    return function loadMutation(client: ApolloClient<any>) {
      return function executeMutation(opts2: MutateOpts<D, V> = {}) {
        return client.mutate<D>({ mutation, ...opts, ...opts2 })
      }
    }
  }
}

// Converts a gql-snippet into a user-callable function that takes options,
// which can then be passed to useApolloQuery to execute the query.
function query<V, D>(doc: DocumentNode) {
  return function configureQuery(opts: QueryOpts<V> = {}) {
    return function executeQuery(client: ApolloClient<any>) {
      return client.watchQuery<D>({ query: doc, ...opts })
    }
  }
}

function subscription<V, D>(doc: DocumentNode) {
  return function configureSubscription(opts: SubscriptionOpts<V> = {}) {
    return function executeSubscription(client: ApolloClient<any>) {
      return client.subscribe<D, V>({ query: doc, ...opts })
    }
  }
}
